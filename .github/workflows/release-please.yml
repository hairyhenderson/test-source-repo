name: release-please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
      - name: Install release-please
        run: npm -g install release-please
      - name: Run release-please github-release
        id: release
        run: |
          release-please \
            --token ${{ steps.app-token.outputs.token }} \
            --repo-url ${{ github.repository }} \
              github-release \
              --draft | tee rp-out.log

          cat rp-out.log | sed -n '/^\[/,$p' > rp-out.js

          # if it's just "[]" assume no-op
          if [ "$(cat rp-out.js)" = "[]" ]; then
            exit 0
          fi

          # convert js object to json - assumes there's only one release
          # this'll have to be refactored if there are multiple releases
          node -e "console.log(JSON.stringify($(cat rp-out.js)))" | jq '.[0]' > rp-out.json
        
          echo "json output: $(cat rp-out.json)"

          # now set outputs
          echo "release_created=true"                      >> "$GITHUB_OUTPUT"
          echo "id=$(        jq '.id'        rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "name=$(      jq '.name'      rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "tag_name=$(  jq '.tagName'   rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "sha=$(       jq '.sha'       rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "notes=$(     jq '.notes'     rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "html_url=$(  jq '.url'       rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "draft=$(     jq '.draft'     rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "upload_url=$(jq '.uploadUrl' rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "path=$(      jq '.path'      rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "version=$(   jq '.version'   rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "major=$(     jq '.major'     rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "minor=$(     jq '.minor'     rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "patch=$(     jq '.patch'     rp-out.json)" >> "$GITHUB_OUTPUT"
      - name: Run release-please release-pr
        id: release-pr
        if: ${{ ! steps.release.outputs.release_created }}
        run: |
          release-please \
            --token ${{ steps.app-token.outputs.token }} \
            --repo-url ${{ github.repository }} \
              release-pr | tee rp-out.log

          # [
          #   {
          #     id: 162181057,
          #     name: 'v0.0.9',
          #     tagName: 'v0.0.9',
          #     sha: '6f2db7dd71e7098501c751218aa1411395c6d47a',
          #     notes: '## [0.0.9](https://github.com/hairyhenderson/test-source-repo/compare/v0.0.8...v0.0.9) (2024-06-25)\n',
          #     url: 'https://github.com/hairyhenderson/test-source-repo/releases/tag/untagged-ea77c84cfaf14327b77c',
          #     draft: true,
          #     uploadUrl: 'https://uploads.github.com/repos/hairyhenderson/test-source-repo/releases/162181057/assets{?name,label}',
          #     path: '.',
          #     version: '0.0.9',
          #     major: 0,
          #     minor: 0,
          #     patch: 9
          #   }
          # ]
          cat rp-out.log | sed -n '/^\[/,$p' > rp-out.js

          # if it's just "[]" assume no-op
          if [ "$(cat rp-out.js)" = "[]" ]; then
            exit 0
          fi

          # set outputs
          echo "prs_created=true"                      >> "$GITHUB_OUTPUT"
          node -e "console.log('pr=' +JSON.stringify($(cat rp-out.js)[0]))" >> "$GITHUB_OUTPUT"
          node -e "console.log('prs='+JSON.stringify($(cat rp-out.js)   ))" >> "$GITHUB_OUTPUT"
      # - uses: googleapis/release-please-action@v4
      #   with:
      #     token: ${{ steps.app-token.outputs.token }}
      #     config-file: release-please-config.json
      - uses: actions/checkout@v4
        if: ${{ steps.release.outputs.release_created }}
      - run: |
          echo "release-please outputs: ${{ steps.release.outputs }}"

          echo ${{ steps.release.outputs.body }} > notes.md
          echo "${{ steps.release.outputs.tag_name }}" > release-asset.txt

          # assert that tag_name isn't empty
          if [ -z "${{ steps.release.outputs.tag_name }}" ]; then
            echo "tag_name is empty"
            exit 1
          fi

          gh release create \
            ${{ steps.release.outputs.tag_name }} \
            release-asset.txt \
            --draft \
            --discussion-category "General" \
            --notes-file=notes.md
          # gh release upload ${{ steps.release.outputs.tag_name }} release-asset.txt
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        if: ${{ steps.release.outputs.release_created }}
