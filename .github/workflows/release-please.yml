name: release-please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
      # I can't use the action because it doesn't support the --draft flag,
      # and it doesn't support uploading assets.
      #
      # - uses: googleapis/release-please-action@v4
      #   with:
      #     token: ${{ steps.app-token.outputs.token }}
      #     config-file: release-please-config.json
      - name: Install release-please
        run: npm -g install release-please
      - name: release-please github-release
        id: release
        run: |
          release-please \
            --token ${{ steps.app-token.outputs.token }} \
            --repo-url ${{ github.repository }} \
              github-release \
              --draft | tee rp-out.log

          # parse the js object and store it - this is brittle!
          cat rp-out.log | sed -n '/^\[/,$p' > rp-out.js

          # if it's just "[]" assume no-op
          if [ "$(cat rp-out.js)" = "[]" ]; then
            exit 0
          fi

          # convert js object to json - assumes there's only one release
          # this'll have to be refactored if there are multiple releases
          node -e "console.log(JSON.stringify($(cat rp-out.js)))" | jq '.[0]' > rp-out.json
        
          echo "json output: $(cat rp-out.json)"

          # now set outputs
          echo "release_created=true"                      >> "$GITHUB_OUTPUT"
          echo "id=$(        jq '.id'        rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "name=$(      jq '.name'      rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "tag_name=$(  jq '.tagName'   rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "sha=$(       jq '.sha'       rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "notes=$(     jq '.notes'     rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "html_url=$(  jq '.url'       rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "draft=$(     jq '.draft'     rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "upload_url=$(jq '.uploadUrl' rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "path=$(      jq '.path'      rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "version=$(   jq '.version'   rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "major=$(     jq '.major'     rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "minor=$(     jq '.minor'     rp-out.json)" >> "$GITHUB_OUTPUT"
          echo "patch=$(     jq '.patch'     rp-out.json)" >> "$GITHUB_OUTPUT"
      - name: release-please release-pr
        id: release-pr
        if: ${{ ! steps.release.outputs.release_created }}
        run: |
          release-please \
            --token ${{ steps.app-token.outputs.token }} \
            --repo-url ${{ github.repository }} \
              release-pr | tee rp-out.log

          # parse the js object and store it - this is brittle!
          cat rp-out.log | sed -n '/^\[/,$p' > rp-out.js

          # if it's just "[]" assume no-op
          if [ "$(cat rp-out.js)" = "[]" ]; then
            exit 0
          fi

          # set outputs
          echo "prs_created=true"                      >> "$GITHUB_OUTPUT"
          node -e "console.log('pr=' +JSON.stringify($(cat rp-out.js)[0]))" >> "$GITHUB_OUTPUT"
          node -e "console.log('prs='+JSON.stringify($(cat rp-out.js)   ))" >> "$GITHUB_OUTPUT"
  create-release:
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.release_created
    env:
      VERSION: ${{ needs.release-please.outputs.tag_name }}
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
      - uses: actions/checkout@v4
      - run: |
          echo "${VERSION}" > release-asset.txt

          # list tags - is this one present?
          git tag

          # assert that tag_name isn't empty
          if [ -z "${VERSION}" ]; then
            echo "tag_name is empty"
            exit 1
          fi

          # link to the release discussion
          gh release edit ${VERSION} --discussion-category "General"

          # upload assets
          gh release upload ${VERSION} release-asset.txt
          gh release upload ${VERSION} README.md

          # now publish the release
          gh release edit ${VERSION} --draft=false
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
